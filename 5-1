import numpy as np

# 设置随机种子以确保结果可复现
np.random.seed(42)

# 利用正态分布随机初始化过滤器、权重和偏置初始值
def initialize_parameters(input_size, hidden_size, output_size):
    w_Fk_ij = np.random.randn(input_size, hidden_size) * 0.01  # 输入层到卷积层的权重
    b_Fk = np.zeros((hidden_size))  # 卷积层的偏置
    w_On_k = np.random.randn(hidden_size, output_size) * 0.01  # 池化层到输出层的权重
    b_o_n = np.zeros((output_size))  # 输出层的偏置
    return w_Fk_ij, b_Fk, w_On_k, b_o_n

def forward_propagation(X, w_Fk_ij, b_Fk, w_On_k, b_o_n):
    z_Fk_ij = np.dot(X.reshape(X.shape[0], -1), w_Fk_ij) + b_Fk
    a_Fk_ij = relu(z_Fk_ij)
    a_Fk_ij = a_Fk_ij.reshape(a_Fk_ij.shape[0], 8, 8)  # 重塑为 8x8
    
    z_Pk_ij = max_pooling(a_Fk_ij)
    a_Pk_ij = relu(z_Pk_ij)
    a_Pk_ij_flattened = a_Pk_ij.reshape(a_Pk_ij.shape[0], -1)
    
    z_o_n = np.dot(a_Pk_ij_flattened, w_On_k) + b_o_n
    a_o_n = sigmoid(z_o_n)
    
    return a_Fk_ij, a_Pk_ij, a_o_n

def relu(X):
    return np.maximum(0, X)

def max_pooling(X, pool_size=2, stride=2):
    batch_size, height, width = X.shape
    output_height = (height - pool_size) // stride + 1
    output_width = (width - pool_size) // stride + 1
    output = np.zeros((batch_size, output_height, output_width))
    
    for b in range(batch_size):
        for y in range(output_height):
            for x in range(output_width):
                window = X[b, y*stride:y*stride+pool_size, x*stride:x*stride+pool_size]
                output[b, y, x] = np.max(window)
    return output
def sigmoid(X):
    return 1 / (1 + np.exp(-X))

# 计算平方误差
def compute_mse(y_true, y_pred):
    return ((y_true - y_pred) ** 2).mean()

# 测试网络
def test_network(X, y_true, w_Fk_ij, b_Fk, w_On_k, b_o_n):
    a_Fk_ij, a_Pk_ij, a_o_n = forward_propagation(X, w_Fk_ij, b_Fk, w_On_k, b_o_n)
    loss = compute_mse(y_true, a_o_n)
    return loss

# 生成随机输入数据
X = np.random.rand(10, 28, 28)  # 10个样本，每个样本28x28
y_true = np.random.rand(10, 10)  # 10个标签，随机生成

# 初始化参数
w_Fk_ij, b_Fk, w_On_k, b_o_n = initialize_parameters(28*28, 64, 10)
w_On_k = np.random.randn(16, 10) * 0.01  
# 测试网络性能
loss = test_network(X, y_true, w_Fk_ij, b_Fk, w_On_k, b_o_n)
print("测试损失:", loss)
